name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:

permissions: read-all

jobs:
  # Test Job
  test:
    name: Run tests
    runs-on: ubuntu-22.04
    steps:
      - name: Check out the Git repository
        uses: actions/checkout@v4

      - name: Set up Java toolchain
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run unit tests
        run: ./gradlew test

  # PMD Analysis Job
  pmd:
    name: PMD Code Analysis
    runs-on: ubuntu-22.04
    permissions:
      security-events: write
    steps:
      - name: Check out the Git repository
        uses: actions/checkout@v4

      - name: Set up Java toolchain
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'

      - name: Run PMD
        uses: pmd/pmd-github-action@v2
        with:
          version: '7.0.0-rc4'
          sourcePath: 'src/main/java'
          rulesets: 'rulesets/java/quickstart.xml'
          analyzeModifiedFilesOnly: false

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pmd-report.sarif

  # Build and Push to Docker Hub
  build-and-push:
    name: Build and Push Docker image
    runs-on: ubuntu-latest
    needs: [test, pmd]
    steps:
      - name: Check out the Git repository
        uses: actions/checkout@v4

      - name: Set up Java toolchain
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}:latest

  # Deploy
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build-and-push]
    steps:
      - name: Deploy Server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            # Clean up old docker images
            docker stop web_server || true
            docker rm web_server || true
            docker rmi $(docker images -a -q) || true
            
            # Login to Docker Hub
            docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
            
            # Pull latest image
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}:latest
            
            # Create .env file if it doesn't exist
            if [ ! -f .env ]; then
              cat <<EOF > .env
              JWT_SECRET=${{ secrets.JWT_SECRET }}
              DATABASE_URL=${{ secrets.DATABASE_URL }}
              DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
              DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
              EOF
            fi
            
            # Run the container with environment variables
            docker run -d \
              --name=web_server \
              -p 8080:8080 \
              --env-file .env \
              ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}:latest